#coding=utf-8

#show different fastener mark for different fastener type.

from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *

from .. import mdb

class FastenerSelectionTab():
    def __init__(self):
        self.IniParameters()
        self.IniUIElements()
        self.DrawTab()

    def IniParameters(self):
        self.fastener_items=[]
        self.fastener_pos=[]
        self.projection_plane='xz'

    def IniUIElements(self):
        self.gview=FastenerViewer(mdb.window)
        self.gscene=QGraphicsScene()
        self.gview.setScene(self.gscene)

        self.div_table=QTableWidget(1,2)
        self.div_table.setFixedWidth(200)

        self.up_button=QPushButton('Up')
        self.down_button=QPushButton('Down')
        self.delete_button=QPushButton('Delete')
        self.projection_combo=QComboBox()
        self.projection_combo.addItem('XZ Plane')
        self.projection_combo.addItem('XY Plane')
        self.projection_combo.setCurrentIndex(0)

    def DrawTab(self):
        tab_layout=QHBoxLayout()
        tab_layout.addWidget(self.div_table)
        tab_layout.addWidget(self.gview)

        self.tab_widget=QWidget()
        self.tab_widget.setLayout(tab_layout)

        self.ProjectFasteners('xz')
        self.ReplotFasteners()

    def DrawCross(self,pos,color_flag='black'):
        pen=QPen()
        pen.setCapStyle(Qt.FlatCap)
        line1=QGraphicsLineItem(pos[0]-mdb.radius,pos[1],pos[0]+mdb.radius,pos[1])
        line2=QGraphicsLineItem(pos[0],pos[1]-mdb.radius,pos[0],pos[1]+mdb.radius)
        line1.setPen(pen)
        line2.setPen(pen)
        self.gscene.addItem(line1)
        self.gscene.addItem(line2)
        return [line1,line2]

    def ProjectFasteners(self,projection_plane_flag):
        if projection_plane_flag=='xz':
            self.projection_plane = 'xz'
            self.projector=(0,1)
            self.ori_point=[mdb.fastener_env[self.projector[0]][0],mdb.fastener_env[self.projector[1]][0]]

    def GroupFasteners(self):
        pass

    def ReplotFasteners(self):
        width=mdb.fastener_env[self.projector[0]][1]-mdb.fastener_env[self.projector[0]][0]
        height=mdb.fastener_env[self.projector[1]][1]-mdb.fastener_env[self.projector[1]][0]
        print(width,height)
        self.gscene.addItem(QGraphicsLineItem(width,height,width+5,height+5))
        for n in mdb.fasteners.keys():
            pos=[mdb.fasteners[n]['coordinate'][self.projector[0]]-self.ori_point[0],
                 mdb.fasteners[n]['coordinate'][self.projector[1]]-self.ori_point[1]]
            self.DrawCross(pos)
        #self.gview.setFixedSize(width,height)

class FastenerViewer(QGraphicsView):
    def __init__(self,parent):
        super(FastenerViewer, self).__init__(parent)
        self._zoom=0
        self._parent=parent
        self.setDragMode(QGraphicsView.ScrollHandDrag)
        #self.setCursor(Qt.CrossCursor)
        #QApplication.setOverrideCursor(Qt.CrossCursor)
        self.setTransformationAnchor(QGraphicsView.AnchorUnderMouse)
        self.setResizeAnchor(QGraphicsView.AnchorUnderMouse)

    def wheelEvent(self, event):
        if event.angleDelta().y() > 0:
            factor = 1.25
            self._zoom += 1
        else:
            factor = 0.8
            self._zoom -= 1
        if self._zoom > 0:
            self.scale(factor, factor)
        elif self._zoom == 0:
            self.scale(factor, factor)
        else:
            self._zoom = 0

    def fitInView(self, scale=True):
        rect = QRectF(self.scene().items()[0].pixmap().rect())
        if not rect.isNull():
            self.setSceneRect(rect)
            if 1:
                unity = self.transform().mapRect(QRectF(0, 0, 1, 1))
                self.scale(1 / unity.width(), 1 / unity.height())
                viewrect = self.viewport().rect()
                scenerect = self.transform().mapRect(rect)
                factor = min(viewrect.width() / scenerect.width(),
                             viewrect.height() / scenerect.height())
                self.scale(factor, factor)
            self._zoom = 0

    def mouseMoveEvent(self, event):
        super().mouseMoveEvent(event)
        pos_on_scene=self.mapToScene(event.pos())
        #print(int(pos_on_scene.x()),int(pos_on_scene.y()))
        #self._parent.CheckHighlight((int(pos_on_scene.x()),int(pos_on_scene.y())))

    def mouseDoubleClickEvent(self, event):
        super().mouseDoubleClickEvent(event)
        pos_on_scene=self.mapToScene(event.pos())
        self._parent.DoubleClicked((int(pos_on_scene.x()),int(pos_on_scene.y())))

class DepthDia(QDialog):
    def __init__(self,parent,rivet_id):
        super(DepthDia, self).__init__(parent)
        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
        self.setWindowTitle('Sunken Value')

        self._parent=parent
        self._rivet_id=rivet_id

        self.DefineGUIElemnets()
        self.DrawLayout()

    def DefineGUIElemnets(self):
        self.ok_button=QPushButton('OK')
        self.ok_button.clicked.connect(self.OKButtonClicked)
        self.cancel_button=QPushButton('Cancel')
        self.cancel_button.clicked.connect(self.CancelButtonClicked)
        self.depth_edit=QLineEdit()
        self.depth_edit.setValidator(QDoubleValidator())

    def DrawLayout(self):
        top_layout=QHBoxLayout()
        top_layout.addWidget(QLabel('Please enter the sunken value (mm):'))
        top_layout.addWidget(self.depth_edit)

        button_layout=QHBoxLayout()
        button_layout.addStretch()
        button_layout.addWidget(self.ok_button)
        button_layout.addWidget(self.cancel_button)

        dia_layout=QVBoxLayout()
        dia_layout.addLayout(top_layout)
        dia_layout.addLayout(button_layout)

        self.setLayout(dia_layout)

    def OKButtonClicked(self):
        depth=float(self.depth_edit.text())
        self._parent.DepthRecevier(self._rivet_id,depth)
        self.close()

    def CancelButtonClicked(self):
        self.close()
        
        
        
        
    
import os

#Program version
version=(0,0,0)
window=None

#a list of nc objects
ncs=[]

#an integer of the current index of nc object in mdb.ncs
current_nc_index=0

#dic to store data of all fasteners
#fasteners[id]['coordinate']=[x,y,z]
#             ['type']=str
#             ['zone']=str
fasteners={}

#list to store x-coordinate and name of frames
#[index]['name']=str
#       ['x']=float
frames=[]

#to be defined
stringers=[]

#to be defined
zones=[]

#
fastener_env=[]

#radius of the fastener marks in view
radius=10.0
