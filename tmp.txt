"""
Copyright ZHANG Yifan

ImageProf is a tool to search and download AIRBUS SA/LR/DD mechanical drawings as well as DMUs.
It connects Gestdoc as its source database. Hence only Spain oriented drawings are available.

Change log:
1.0.0 New program
1.0.1 Fixed a bug that ECN files cannot be opened by double click.
1.0.2 Fixed a bug that search cannot be completed after session time out.
1.1.0 Improved order of search results.
      Improved update function.
      Improved function of copying files.
      Fixed a bug not showing results more than 99.
      Fixed a bug in version check.
      Fixed a bug that program broken when repetitive items in batch search.
1.1.1 Improved message when searching A350 drawings.
      Fixed a bug that some drawing descriptions are in a bracket.
1.1.2 Support drawing number with alphabetic letter in non-initial letters.
      Support drawing number with initial 'A' (system parts).
"""

import sys
import random
import requests
from requests.auth import HTTPBasicAuth
import os
import shutil
import threading
import queue
import uuid

from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5.QtSvg import QSvgWidget
from bs4 import BeautifulSoup

def DMUFolders():
    relative_path=['//03_DD//01_HTP//01_Design//01_DMU_CAT',
        '//03_DD//02_Elevator//01_Design//01_DMU_CAT',
        '//03_DD//03_VTP//01_Design//01_DMU_CAT',
        '//03_DD//04_Rudder//01_Design//01_DMU_CAT',
        '//03_DD//05_S19//01_Design//01_ DMU_CAT',
        '//03_DD//06_S19.1//01_Design//01_DMU_CAT',
        '//03_DD//07_MLGD//01_Design//01_DMU_CAT',
        '//03_DD//08_BF//01_Design//01_DMU_CAT',
        '//03_DD//99_DMU_General',
        '//02_LR//01_HTP//01_Design//01_DMU//A330skin_lower_left',
        '//02_LR//01_HTP//01_Design//01_DMU//A330skin_lower_right',
        '//02_LR//01_HTP//01_Design//01_DMU//A330skin_upper_left',
        '//02_LR//01_HTP//01_Design//01_DMU//A330skin_upper_right',
        '//02_LR//01_HTP//01_Design//01_DMU//Native part',
        '//02_LR//03_PAX//01_Design//01_DMU',
        '//02_LR//04_S19.1//02_Design']
    root_path='M://EST_SFS'
    full_path=[]
    for n in relative_path:
        full_path.append(root_path+n)
    return full_path

def SetProxy():
    proxy = '44.251.2.49:8080'
    os.environ['http_proxy'] = proxy
    os.environ['HTTP_PROXY'] = proxy
    os.environ['https_proxy'] = proxy
    os.environ['HTTPS_PROXY'] = proxy
    return

def SessionIDGenerator():
    letters='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    id=''
    for n in range(0,12):
        id+=random.choice(letters)
    return id

def GetCacheDir():
    dir='C://Temp//ImageProf'
    return dir

def FileExistenceChecker(cache_dir,drawing_no,file_name):
    full_dir=cache_dir+'//'+drawing_no+'//'+file_name
    if os.path.exists(full_dir):
        return True
    return False

def DrawingNoParser(drawing_no_raw):
    drawing_no_proc=''
    drawing_no_raw=drawing_no_raw.upper()
    if len(drawing_no_raw)==0:
        return [-1,'The drawing number is empty.']
    elif len(drawing_no_raw)<9:
        return [-2,'The drawing number is incomplete.']
    for n in drawing_no_raw:
        if n.isdigit() or n.isalpha():
            drawing_no_proc+=n
    if len(drawing_no_proc)<9:
        return [-2, 'The drawing number is incomplete.']
    if not drawing_no_proc[0].isalpha():
        return [-3,'The drawing number is illegal.']
    if drawing_no_proc[0] in ['L','T']:
        database_code=21
    elif drawing_no_proc[0] in ['D','E','F','G','A']:
        database_code=22
    elif drawing_no_proc[0] == 'V':
        return [-3, 'A350 drawings are not supported.']
    else:
        return [-3, 'The drawing number is illegal.']
    #for n in drawing_no_proc[1:9]:
    #    if not n.isdigit():
    #        return [-3, 'The drawing number is illegal.']
    drawing_no=drawing_no_proc[:9]
    return [0,[drawing_no,database_code]]

def BatchDrawingParser(text_raw):
    if len(text_raw)==0:
        return [-1,'The search box is empty.']
    lines=text_raw.split('\n')
    drawing_no_list=[]
    database_code_list=[]
    for n in lines:
        if not len(n)==0:
            [status,flag]=DrawingNoParser(n)
            if not status==0:
                return [status,flag]
            [drawing_no,database_code]=flag
            if not drawing_no in drawing_no_list:
                drawing_no_list.append(drawing_no)
                database_code_list.append(database_code)
    return [0,[drawing_no_list,database_code_list]]

def LatestVersionChecker():
    path='M://CREATE//createxzhang_yf//ImageProf//version.inf'
    try:
        with open(path,'r') as f:
            content=f.readline()
    except:
        return [-1,'']
    version_codes=content.split('.')
    version=[]
    for n in version_codes:
        version.append(int(n))
    return [0,version]

class MainWindow(QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.setWindowTitle('ImageProf.')
        self.setMinimumHeight(600)
        self.setMinimumWidth(850)
        self.version=[1,1,2]

        self.IniParameters()
        self.DefineGUIElements()
        self.DrawLayout()

        try:
            self.setWindowIcon(QIcon('%s//icon.svg' %self.cache_dir))
        except:
            pass

        threading.Thread(target=self.IniGestDocConnection).start()
        threading.Thread(target=self.FetchDMUList).start()

        [status,flag]=LatestVersionChecker()
        if status==0:
            self.UpdateAvailable(flag)

    def IniParameters(self):
        #Database
        self.search_results={}
        self.searched_items=[]
        self.current_drawing=None
        self.dl_check_timer=QTimer()
        self.dmu_database={}
        self.dmu_fetching_done=False
        self.dmu_timer=QTimer()
        self.search_returned=[]
        self.last_search=[]
        self.save_as_delay_timer=QTimer()
        self.ecn_dl_checker_timer=QTimer()

        #Locate cache directory
        self.cache_dir=GetCacheDir()
        if os.path.exists(self.cache_dir):
            list=os.listdir(self.cache_dir)
            for n in list:
                path=os.path.join(self.cache_dir,n)
                if os.path.isfile(path):
                    try:
                        os.remove(os.path.join(self.cache_dir,n))
                    except:
                        pass
                else:
                    try:
                        shutil.rmtree(path)
                    except:
                        pass
        else:
            os.makedirs(self.cache_dir)
        session_uuid=uuid.uuid4()
        self.cache_dir=self.cache_dir+'//'+str(session_uuid)
        os.makedirs(self.cache_dir)

        SVGGenerator_essential(self.cache_dir)

        #Estabilish communication slot
        self.communicate=Communicate()
        self.communicate.NewSearchComplete.connect(self.NewSearchComplete)

    def DefineGUIElements(self):
        self.search_button=QPushButton('Search')
        self.search_button.setDisabled(True)
        self.search_button.clicked.connect(self.SearchButtonClicked)

        self.batch_button=QPushButton('Batch')
        self.batch_button.setDisabled(True)
        self.batch_button.clicked.connect(self.BatchButtonClicked)

        self.drawing_no_edit=QLineEdit()
        self.drawing_no_edit.returnPressed.connect(self.SearchButtonClicked)

        self.history_table=QTableWidget(1,2)
        header = ['Drawing No.', 'Drawing Name']
        self.history_table.setHorizontalHeaderLabels(header)
        self.history_table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.history_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.history_table.doubleClicked.connect(self.HistoryTableDoubleClicked)

        self.drawing_table=QTableWidget(1,2)
        header = ['Sheet Name', 'Downloading Status']
        self.drawing_table.setHorizontalHeaderLabels(header)
        self.drawing_table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.drawing_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.drawing_table.doubleClicked.connect(self.DrawingTableDoubleClicked)
        self.drawing_table.verticalHeader().hide()

        self.ecn_table=QTableWidget(1,2)
        header = ['Sheet Name', 'Downloading Status']
        self.ecn_table.setHorizontalHeaderLabels(header)
        self.ecn_table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.ecn_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.ecn_table.doubleClicked.connect(self.ECNTableDoubleClicked)
        self.ecn_table.verticalHeader().hide()

        self.dmu_table=QTableWidget(1,2)
        header = ['DMU File Name', 'Path']
        self.dmu_table.setHorizontalHeaderLabels(header)
        self.dmu_table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.dmu_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.dmu_table.verticalHeader().hide()

        self.drawing_save_all_button=QPushButton('Save All')
        self.drawing_save_all_button.clicked.connect(self.DrawingSaveAllClicked)
        self.drawing_save_selected_button=QPushButton('Save Selected')
        self.drawing_save_selected_button.clicked.connect(self.DrawingSaveSelectedClicked)

        self.ecn_download_button=QPushButton('Start Downlaod')
        self.ecn_download_button.clicked.connect(self.ENCDownloadClicked)
        self.ecn_save_all_button=QPushButton('Save All')
        self.ecn_save_all_button.clicked.connect(self.ECNSaveAllClicked)
        self.ecn_save_selected_button=QPushButton('Save Selected')
        self.ecn_save_selected_button.clicked.connect(self.ECNSaveSelectedClicked)

        self.dmu_save_selected_button=QPushButton('Save Selected')
        self.dmu_save_selected_button.clicked.connect(self.DMUSaveSelectedClicked)

        self.drawing_no_board=BoardLineEdit()
        self.drawing_no_board.setReadOnly(True)
        self.drawing_no_board.setAlignment(Qt.AlignCenter)

        self.drawing_name_board=BoardLineEdit()
        self.drawing_name_board.setReadOnly(True)
        self.drawing_name_board.setAlignment(Qt.AlignCenter)

    def DrawLayout(self):
        search_group=QGroupBox('Search Drawing')
        search_button_layout=QHBoxLayout()
        search_button_layout.addStretch()
        search_button_layout.addWidget(self.batch_button)
        search_button_layout.addWidget(self.search_button)
        search_group_layout=QVBoxLayout()
        search_group_layout.addWidget(self.drawing_no_edit)
        search_group_layout.addLayout(search_button_layout)
        search_group.setLayout(search_group_layout)

        search_history_group=QGroupBox('Search History')
        history_layout=QVBoxLayout()
        history_layout.addWidget(self.history_table)
        search_history_group.setLayout(history_layout)

        left_layout=QVBoxLayout()
        left_layout.addWidget(search_group)
        left_layout.addWidget(search_history_group)
        left_widget=QWidget()
        left_widget.setLayout(left_layout)
        left_widget.setFixedWidth(350)

        logo = LogoSvgWidget(self.cache_dir + '//logo.svg')
        logo.setFixedSize(360, 360)
        logo_layout_h=QHBoxLayout()
        logo_layout_h.addStretch()
        logo_layout_h.addWidget(logo)
        logo_layout_h.addStretch()
        logo_layout=QVBoxLayout()
        logo_layout.addStretch()
        logo_layout.addLayout(logo_layout_h)
        logo_layout.addStretch()
        logo_stack=QWidget()
        logo_stack.setLayout(logo_layout)

        board_grid=QGridLayout()
        board_grid.addWidget(QLabel('Drawing Number:'),0,0)
        board_grid.addWidget(self.drawing_no_board,0,1)
        board_grid.addWidget(QLabel('Drawing Name:'),1,0)
        board_grid.addWidget(self.drawing_name_board,1,1)

        drawing_button_layout=QHBoxLayout()
        drawing_button_layout.addStretch()
        drawing_button_layout.addWidget(self.drawing_save_selected_button)
        drawing_button_layout.addWidget(self.drawing_save_all_button)

        drawing_layout=QVBoxLayout()
        drawing_layout.addWidget(self.drawing_table)
        drawing_layout.addLayout(drawing_button_layout)
        drawing_tab=QWidget()
        drawing_tab.setLayout(drawing_layout)

        ecn_button_layout=QHBoxLayout()
        ecn_button_layout.addStretch()
        ecn_button_layout.addWidget(self.ecn_download_button)
        ecn_button_layout.addWidget(self.ecn_save_selected_button)
        ecn_button_layout.addWidget(self.ecn_save_all_button)

        ecn_layout=QVBoxLayout()
        ecn_layout.addWidget(self.ecn_table)
        ecn_layout.addLayout(ecn_button_layout)
        ecn_tab=QWidget()
        ecn_tab.setLayout(ecn_layout)

        dmu_button_layout=QHBoxLayout()
        dmu_button_layout.addStretch()
        dmu_button_layout.addWidget(self.dmu_save_selected_button)

        dmu_layout=QVBoxLayout()
        dmu_layout.addWidget(self.dmu_table)
        dmu_layout.addLayout(dmu_button_layout)
        dmu_tab=QWidget()
        dmu_tab.setLayout(dmu_layout)

        table_tab=QTabWidget()
        table_tab.addTab(drawing_tab,'Drawing && BoM')
        table_tab.addTab(ecn_tab,'ECN Files')
        table_tab.addTab(dmu_tab,'CATIA DMU')

        right_layout=QVBoxLayout()
        right_layout.addLayout(board_grid)
        right_layout.addWidget(table_tab)
        right_widget=QWidget()
        right_widget.setLayout(right_layout)

        self.stack=QStackedWidget()
        self.stack.addWidget(logo_stack)
        self.stack.addWidget(right_widget)

        main_layout=QHBoxLayout()
        main_layout.addWidget(left_widget)
        main_layout.addWidget(self.stack)
        c_widget=QWidget()
        c_widget.setLayout(main_layout)

        self.setCentralWidget(c_widget)

    def SearchButtonDisability(self,flag):
        if flag=='enable':
            status=False
        elif flag=='disable':
            status=True
        else:
            status=False
        self.search_button.setDisabled(status)
        self.batch_button.setDisabled(status)

    def IniGestDocConnection(self):
        self.gestdoc=GestDocSession()
        self.SearchButtonDisability('enable')

    def SearchButtonClicked(self):
        if not self.search_button.isEnabled():
            return

        #Format the drawing number input
        drawing_no_raw = self.drawing_no_edit.text()
        [status_code,flag] = DrawingNoParser(drawing_no_raw)
        if not status_code==0:
            msg=flag
            self.dia = WarningBox(self, msg)
            self.dia.exec_()
            return
        [drawing_no,database_code] = flag

        #Check if results already exist
        if drawing_no in self.search_results.keys():
            self.current_drawing=drawing_no
            self.ReplotDrawingTable()
            self.ReplotECNTable()
            self.ReplotHistoryTable()
            self.ReplotDMUTable()
            self.drawing_name_board.setText('%s' % (self.search_results[self.current_drawing]['name']))
            self.drawing_no_board.setText('%s' % (self.current_drawing))
            return

        self.SearchButtonDisability('disable')
        self.submit_search_threading=threading.Thread(target=self.SubmitSearch, args=([drawing_no],[database_code]))
        self.submit_search_threading.setDaemon(True)
        self.submit_search_threading.start()

    def SubmitSearch(self,drawing_numbers,database_codes):
        #This function always running in another threading

        #Submit search
        for n in range(0,len(drawing_numbers)):
            [status_code,flag] = self.gestdoc.SubmitSearch(drawing_numbers[n]+'*',database_codes[n])
            if not status_code==0:
                self.search_returned=[status_code,flag]
                self.communicate.NewSearchComplete.emit()
                return
            [drawing_name, drawings]=flag

            #Save to var
            db=drawings
            db['name']=drawing_name
            db['ecn_downloaded']=False
            db['file_name']['drawing']=db['file_name']['drawing'][::-1]
            db['file_name']['drawing']=db['file_name']['drawing']+db['file_name']['other']
            db['link']['drawing'] = db['link']['drawing'][::-1]
            db['link']['drawing']=db['link']['drawing'] +db['link']['other']
            self.search_results[drawing_numbers[n]]=db
            self.searched_items.append(drawing_numbers[n])
        self.current_drawing=drawing_numbers[0]

        #signal main threading
        self.search_returned=[0,'']
        self.last_search=drawing_numbers
        self.communicate.NewSearchComplete.emit()

    def NewSearchComplete(self):
        #Terminate the searching threading
        self.submit_search_threading.join()
        self.SearchButtonDisability('enable')

        if not self.search_returned[0]==0:
            [status_code,flag]=self.search_returned
            self.dia=WarningBox(self,flag)
            self.dia.exec_()
            return

        #Update GUI
        self.stack.setCurrentIndex(1)
        self.ReplotDrawingTable()
        self.ReplotECNTable()
        self.ReplotHistoryTable()
        self.ReplotDMUTable()
        self.drawing_name_board.setText('%s' %(self.search_results[self.current_drawing]['name']))
        self.drawing_no_board.setText('%s' %(self.current_drawing))

        #Start downloading
        to_download = {'file_name': [], 'link': [], 'target_folder':[]}
        for m in self.last_search:
            target_folder = self.cache_dir + '//%s' % (m)
            os.makedirs(target_folder)
            db = self.search_results[m]
            for n in db['file_name']['lpi']:
                to_download['file_name'].append(n)
            for n in db['link']['lpi']:
                to_download['link'].append(n)
            for n in db['file_name']['drawing']:
                to_download['file_name'].append(n)
            for n in db['link']['drawing']:
                to_download['link'].append(n)
            for n in range(0,(len(db['file_name']['lpi'])+len(db['file_name']['drawing']))):
                to_download['target_folder'].append(target_folder)
        self.downloader = Downloader(to_download['file_name'], to_download['link'], to_download['target_folder'])

        #Activate downloading status checker
        self.DrawingDownloadStatusChecker()

    def ReplotDrawingTable(self):
        self.drawing_table.clearContents()
        db=self.search_results[self.current_drawing]
        row_no=len(db['file_name']['drawing'])+len(db['file_name']['lpi'])
        self.drawing_table.setRowCount(row_no)
        row_pointer=0
        for n in db['file_name']['lpi']:
            item=QTableWidgetItem('%s' %(n))
            self.drawing_table.setItem(row_pointer,0,item)
            existence=FileExistenceChecker(self.cache_dir,self.current_drawing,n)
            if not existence:
                item=QTableWidgetItem('Pending')
            else:
                item=QTableWidgetItem('Complete')
            self.drawing_table.setItem(row_pointer,1,item)
            self.drawing_table.item(row_pointer,1).setTextAlignment(Qt.AlignCenter)
            row_pointer+=1
        for n in db['file_name']['drawing']:
            item=QTableWidgetItem('%s' %(n))
            self.drawing_table.setItem(row_pointer,0,item)
            existence = FileExistenceChecker(self.cache_dir, self.current_drawing, n)
            if not existence:
                item = QTableWidgetItem('Pending')
            else:
                item = QTableWidgetItem('Complete')
            self.drawing_table.setItem(row_pointer, 1, item)
            self.drawing_table.item(row_pointer, 1).setTextAlignment(Qt.AlignCenter)
            row_pointer+=1
        self.drawing_table.resizeColumnsToContents()

    def ReplotECNTable(self):
        self.ecn_table.clearContents()
        db=self.search_results[self.current_drawing]
        row_no=len(db['file_name']['ecn'])
        self.ecn_table.setRowCount(row_no)
        for n in range(0,row_no):
            item=QTableWidgetItem('%s' %(db['file_name']['ecn'][n]))
            self.ecn_table.setItem(n,0,item)
            existence = FileExistenceChecker(self.cache_dir, self.current_drawing, db['file_name']['ecn'][n])
            if not existence:
                item = QTableWidgetItem('Pending')
            else:
                item = QTableWidgetItem('Complete')
            self.ecn_table.setItem(n, 1, item)
            self.ecn_table.item(n,1).setTextAlignment(Qt.AlignCenter)
        self.ecn_table.resizeColumnsToContents()

        #Availibility of buttons
        if db['ecn_downloaded']:
            self.ecn_download_button.setDisabled(True)
            self.ecn_save_all_button.setDisabled(False)
            self.ecn_save_selected_button.setDisabled(False)
        else:
            self.ecn_download_button.setDisabled(False)
            self.ecn_save_all_button.setDisabled(True)
            self.ecn_save_selected_button.setDisabled(True)

        if db['ecn_downloaded']:
            self.ECNDownloadStatusChecker()

    def ReplotHistoryTable(self):
        self.history_table.setRowCount(len(self.searched_items))
        #current_row_no=self.history_table.rowCount()
        #if current_row_no==len(self.searched_items) and self.history_table.item(0,0)==None:
        #    row_to_write=0
        #elif current_row_no<len(self.searched_items):
        #    self.history_table.setRowCount(len(self.searched_items))
        #else:
        #    return
        for n in range(0,len(self.searched_items)):
            item=QTableWidgetItem('%s' %(self.searched_items[n]))
            self.history_table.setItem(n,0,item)
            item=QTableWidgetItem('%s' %(self.search_results[self.searched_items[n]]['name']))
            self.history_table.setItem(n,1,item)
        self.history_table.resizeColumnsToContents()
        self.history_table.selectRow(self.searched_items.index(self.current_drawing))

    def ReplotDMUTable(self):
        self.dmu_table.clearContents()
        if not self.dmu_fetching_done:
            self.dmu_timer.singleShot(200, self.ReplotDMUTable)
            return
        if self.current_drawing in self.dmu_database.keys():
            self.dmu_table.setRowCount(len(self.dmu_database[self.current_drawing]['file_name']))
            for n in range(0,len(self.dmu_database[self.current_drawing]['file_name'])):
                item=QTableWidgetItem('%s' %(self.dmu_database[self.current_drawing]['file_name'][n]))
                self.dmu_table.setItem(n,0,item)
                item=QTableWidgetItem('%s' %(self.dmu_database[self.current_drawing]['link'][n]))
                self.dmu_table.setItem(n,1,item)
            self.dmu_table.resizeColumnsToContents()
        else:
            self.dmu_table.setRowCount(1)

    def DrawingDownloadStatusChecker(self):
        db=self.search_results[self.current_drawing]
        folder_path=self.cache_dir+'//'+self.current_drawing
        undownloaded=0
        for n in range(0,self.drawing_table.rowCount()):
            if self.drawing_table.item(n,1).text()=='Pending':
                file_name=self.drawing_table.item(n,0).text()
                file_path=folder_path+'//'+file_name
                existence=os.path.exists(file_path)
                if existence:
                    self.drawing_table.item(n, 1).setText('Complete')
                else:
                    undownloaded+=1
        if undownloaded>0:
            self.dl_check_timer.singleShot(500,self.DrawingDownloadStatusChecker)

    def ECNDownloadStatusChecker(self):
        if not self.search_results[self.current_drawing]['ecn_downloaded']:
            return
        folder_path = self.cache_dir + '//' + self.current_drawing
        undownloaded = 0
        for n in range(0,self.ecn_table.rowCount()):
            if self.ecn_table.item(n,1).text()=='Pending':
                file_name=self.ecn_table.item(n,0).text()
                file_path=folder_path+'//'+file_name
                existence=os.path.exists(file_path)
                if existence:
                    self.ecn_table.item(n, 1).setText('Complete')
                else:
                    undownloaded+=1
        if undownloaded>0:
            self.ecn_dl_checker_timer.singleShot(500,self.ECNDownloadStatusChecker)

    def DrawingTableDoubleClicked(self,clicked_index):
        if self.current_drawing==None:
            return
        row=clicked_index.row()
        if self.drawing_table.item(row,1).text()=='Complete':
            file_name=self.drawing_table.item(row,0).text()
            target_path=self.cache_dir+'//'+self.current_drawing+'//'+file_name
            threading.Thread(target=os.startfile, args=(target_path,)).start()

    def ECNTableDoubleClicked(self,clicked_index):
        if self.current_drawing==None:
            return
        row=clicked_index.row()
        if self.ecn_table.item(row,1).text()=='Complete':
            file_name=self.ecn_table.item(row,0).text()
            target_path=self.cache_dir+'//'+self.current_drawing+'//'+file_name
            threading.Thread(target=os.startfile,args=(target_path,)).start()

    def HistoryTableDoubleClicked(self,clicked_index):
        if len(self.searched_items)==0:
            return
        row=clicked_index.row()
        self.current_drawing=self.searched_items[row]
        self.ReplotDrawingTable()
        self.ReplotECNTable()
        self.ReplotDMUTable()
        self.drawing_name_board.setText('%s' % (self.search_results[self.current_drawing]['name']))
        self.drawing_no_board.setText('%s' % (self.current_drawing))
        if self.dl_check_timer.isActive():
            self.dl_check_timer.stop()
        self.DrawingDownloadStatusChecker()

    def FetchDMUList(self):
        folder_path=DMUFolders()
        dmu_database={}
        for n in folder_path:
            #duration=time.time()
            files=os.listdir(n)
            #duration=time.time()-duration
            #print(duration)
            for m in files:
                name_component=m.split('.')
                if len(name_component)>1:
                    key=name_component[0].upper()[:9]
                    if not key in dmu_database.keys():
                        dmu_database[key]={'file_name':[],'link':[]}
                    dmu_database[key]['file_name'].append(m)
                    dmu_database[key]['link'].append(n+'//'+m)
        self.dmu_database=dmu_database
        self.dmu_fetching_done=True
        #print('done')

    def closeEvent(self, evnt):
        super(MainWindow,self).closeEvent(evnt)
        #Clean up the cache folder
        cache_dir=GetCacheDir()
        list=os.listdir(cache_dir)
        for n in list:
            path=os.path.join(cache_dir,n)
            if os.path.isfile(path):
                try:
                    os.remove(os.path.join(cache_dir,n))
                except:
                    pass
            else:
                try:
                    shutil.rmtree(path)
                except:
                    pass

    def MsgBoxInterface(self,status,flag):
        pass

    def BatchButtonClicked(self):
        self.batch_dia=BatchDia(self)
        self.batch_dia.exec_()

    def BatchDiaRecevier(self,raw_text):
        [status,flag]=BatchDrawingParser(raw_text)
        if not status==0:
            self.dia=WarningBox(self,flag)
            self.dia.exec_()
            return
        [drawing_no_list,database_code_list]=flag

        #Eliminate drawings have aready been searched
        drawing_no_tosearch=[]
        database_code_tosearch=[]
        for n in drawing_no_list:
            if not n in self.search_results.keys():
                drawing_no_tosearch.append(n)
                database_code_tosearch.append(database_code_list[drawing_no_list.index(n)])

        if len(drawing_no_tosearch)>0:
            self.SearchButtonDisability('disable')
        else:
            self.dia=WarningBox(self,'No new drawing to search.')
            self.dia.exec_()
            return

        self.submit_search_threading = threading.Thread(target=self.SubmitSearch, args=(drawing_no_tosearch,
                                                                                        database_code_tosearch))
        self.submit_search_threading.setDaemon(True)
        self.submit_search_threading.start()

    def ENCDownloadClicked(self):
        db=self.search_results[self.current_drawing]

        #Start downloading
        to_download = {'file_name': [], 'link': [], 'target_folder':[]}
        target_folder = self.cache_dir + '//%s' % (self.current_drawing)
        for n in db['file_name']['ecn']:
            to_download['file_name'].append(n)
        for n in db['link']['ecn']:
            to_download['link'].append(n)
        for n in range(0,len(db['file_name']['ecn'])):
            to_download['target_folder'].append(target_folder)
        self.downloader = Downloader(to_download['file_name'], to_download['link'], to_download['target_folder'])

        db['ecn_downloaded']=True
        self.ecn_save_selected_button.setDisabled(False)
        self.ecn_save_all_button.setDisabled(False)
        self.ECNDownloadStatusChecker()

    def DrawingSaveSelectedClicked(self):
        selected_indexes=self.drawing_table.selectedIndexes()
        selected_rows=[n.row() for n in selected_indexes]
        selected_rows=list(set(selected_rows))
        if len(selected_rows)==0:
            self.dia=WarningBox(self,'Nothing is selected.')
            self.dia.exec_()
            return
        path=QFileDialog.getExistingDirectory(self, "Please Select a Directory to Save",os.path.expanduser("~/Desktop"))
        if len(path)==0:
            return
        for n in selected_rows:
            if not self.drawing_table.item(n,1).text()=='Complete':
                self.SaveAsWaiter('drawing',selected_rows,path)

                self.wait_dia = WaitingDialog(self)
                self.wait_dia.exec_()
                return
        self.Saver('drawing',selected_rows,path)

    def DMUSaveSelectedClicked(self):
        selected_indexes = self.dmu_table.selectedIndexes()
        selected_rows = [n.row() for n in selected_indexes]
        selected_rows = list(set(selected_rows))
        if len(selected_rows)==0:
            self.dia=WarningBox(self,'Nothing is selected.')
            self.dia.exec_()
            return
        if self.dmu_table.item(0,1)==None:
            return
        path = QFileDialog.getExistingDirectory(self, "Please Select a Directory to Save",os.path.expanduser("~/Desktop"))
        if len(path) == 0:
            return
        self.Saver('dmu', selected_rows, path)

    def DrawingSaveAllClicked(self):
        path = QFileDialog.getExistingDirectory(self, "Please Select a Directory to Save",os.path.expanduser("~/Desktop"))
        if len(path)==0:
            return
        selected_rows=[n for n in range(0,self.drawing_table.rowCount())]
        for n in selected_rows:
            if not self.drawing_table.item(n, 1).text() == 'Complete':
                self.SaveAsWaiter('drawing', selected_rows, path)

                self.wait_dia = WaitingDialog(self)
                self.wait_dia.exec_()
                return
        self.Saver('drawing', selected_rows, path)

    def ECNSaveAllClicked(self):
        path = QFileDialog.getExistingDirectory(self, "Please Select a Directory to Save",os.path.expanduser("~/Desktop"))
        if len(path) == 0:
            return
        selected_rows = [n for n in range(0, self.ecn_table.rowCount())]
        for n in selected_rows:
            if not self.ecn_table.item(n, 1).text() == 'Complete':
                self.SaveAsWaiter('drawing', selected_rows, path)

                self.wait_dia = WaitingDialog(self)
                self.wait_dia.exec_()
                return
        self.Saver('ecn', selected_rows, path)

    def SaveAsWaiter(self,table_flag,selected_rows,path):
        if table_flag=='drawing':
            for n in selected_rows:
                if not self.drawing_table.item(n, 1).text() == 'Complete':
                    self.save_as_delay_timer.singleShot(200,lambda: self.SaveAsWaiter(table_flag,selected_rows,path))
                    return
            self.wait_dia.close()
            self.Saver(table_flag,selected_rows,path)
        elif table_flag=='ecn':
            for n in selected_rows:
                if not self.ecn_table.item(n, 1).text() == 'Complete':
                    self.save_as_delay_timer.singleShot(200,lambda: self.SaveAsWaiter(table_flag,selected_rows,path))
                    return
            self.wait_dia.close()
            self.Saver(table_flag, selected_rows, path)

    def ECNSaveSelectedClicked(self):
        selected_indexes=self.ecn_table.selectedIndexes()
        selected_rows=[n.row() for n in selected_indexes]
        selected_rows=list(set(selected_rows))
        if len(selected_rows)==0:
            self.dia=WarningBox(self,'Nothing is selected.')
            self.dia.exec_()
            return
        path=QFileDialog.getExistingDirectory(self, "Please Select a Directory to Save",os.path.expanduser("~/Desktop"))
        if len(path)==0:
            return
        for n in selected_rows:
            if not self.ecn_table.item(n,1).text()=='Complete':
                self.SaveAsWaiter('ecn',selected_rows,path)

                self.wait_dia = WaitingDialog(self)
                self.wait_dia.exec_()
                return
        self.Saver('ecn',selected_rows,path)

    def Saver(self,table_flag,selected_rows,path):
        file_names=[]
        ori_file_path=[]

        #Form the variables to copy files
        if table_flag=='drawing':
            for n in selected_rows:
                file_names.append(self.drawing_table.item(n,0).text())
            ori_folder=self.cache_dir+'//'+self.current_drawing
            for n in file_names:
                ori_file_path.append('%s//%s' % (ori_folder, n))
        elif table_flag=='dmu':
            for n in selected_rows:
                ori_file_path.append(self.dmu_table.item(n,1).text())
            for n in ori_file_path:
                file_names.append(n.split('/')[-1])
        elif table_flag=='ecn':
            for n in selected_rows:
                file_names.append(self.ecn_table.item(n,0).text())
            ori_folder=self.cache_dir+'//'+self.current_drawing
            for n in file_names:
                ori_file_path.append('%s//%s' % (ori_folder, n))

        self.CopyFileStage1(file_names,ori_file_path,path)

    def CopyFileStage1(self,file_names,ori_path,target_folder):
        duplicate_names=[]
        duplicate_ori_path=[]
        for n in range(0,len(file_names)):
            if not os.path.exists('%s//%s' %(target_folder,file_names[n])):
                try:
                    shutil.copyfile(ori_path[n], '%s//%s' % (target_folder, file_names[n]))
                except:
                    warning_box = WarningBox(self, 'File writing denied.')
                    warning_box.exec_()
                    return
            else:
                duplicate_names.append(file_names[n])
                duplicate_ori_path.append(ori_path[n])
        if len(duplicate_names)>0:
            self.ow_box=OverwriteDia(self,duplicate_names,duplicate_ori_path,target_folder)
            self.ow_box.exec_()
        else:
            info_box = InfoBox(self, 'Done.')
            info_box.exec_()

    def CopyFileStage2(self,file_names,ori_path,target_folder,flag):
        self.ow_box.close()
        if flag=='overwirte':
            for n in range(0,len(file_names)):
                try:
                    shutil.copyfile(ori_path[n], '%s//%s' % (target_folder, file_names[n]))
                except:
                    warning_box=WarningBox(self,'Overwriting of %s denied.' %file_names[n])
                    warning_box.exec_()
        elif flag=='keepboth':
            for n in range(0,len(file_names)):
                suffix=1
                while 1:
                    name_split=os.path.splitext(file_names[n])
                    if not os.path.exists('%s//%s_%d%s' % (target_folder, name_split[0],suffix,name_split[1])):
                        shutil.copyfile(ori_path[n], '%s//%s_%d%s' % (target_folder, name_split[0],suffix,name_split[1]))
                        break
                    else:
                        suffix+=1
        info_box = InfoBox(self, 'Done.')
        info_box.exec_()

    def UpdateAvailable(self,version):
        for n in range(0,len(self.version)):
            if version[n]>self.version[n]:
                self.dia=InfoBox(self,['Update available!',
                                       'Current version: %d.%d.%d' %(self.version[0],self.version[1],self.version[2]),
                                       'Latest version: %d.%d.%d' %(version[0],version[1],version[2]),
                                       '<a href="M:/CREATE/createxzhang_yf/ImageProf">Click here to download</a>'])
                self.dia.exec_()
                return
            elif version[n]<self.version[n]:
                break

class Communicate(QObject):
    NewSearchComplete=pyqtSignal()

class GestDocSession():
    def __init__(self):
        self.IniConnection()

    def IniConnection(self):
        self.session_id=SessionIDGenerator()
        dic_value='JSESSIONID=%s' %(self.session_id)
        self.headers = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                   'Accept-Encoding': 'gzip, deflate',
                   'Accept-Language': 'en-US,en;q=0.5',
                   'Authorization': 'Basic dWE1OTk1OnVhNTk5NQ==',
                   'Connection': 'keep-alive',
                   'Cookie': dic_value,
                   'Host': 'gestdoc.es.eu.airbus.corp:8095',
                   'Referer': 'http://gestdoc.es.eu.airbus.corp:8095/gd/homePlan.do'}
        self.session=requests.Session()
        self.session.get('http://gestdoc.es.eu.airbus.corp:8095/gd/homePlan.do', headers=self.headers)

    def SubmitSearch(self,drawing_no,database_code):
        #Submit search to Gestdoc
        post = {'docNumber': drawing_no,
                'airplaneZone': '',
                'drawingDesription': '',
                'module': database_code,
                'rowNumber': 99}
        self.session.post('http://gestdoc.es.eu.airbus.corp:8095/gd/actualPlanSubmit.do', data=post, headers=self.headers)
        url='http://gestdoc.es.eu.airbus.corp:8095/gd/list.do;jsessionid=%s' %(self.session_id)
        response=self.session.post(url, headers=self.headers)

        #Re-estatiblish session if time-out
        if len(response.text)<10:
            self.IniConnection()
            self.session.post('http://gestdoc.es.eu.airbus.corp:8095/gd/actualPlanSubmit.do', data=post,
                              headers=self.headers)
            url = 'http://gestdoc.es.eu.airbus.corp:8095/gd/list.do;jsessionid=%s' % (self.session_id)
            response = self.session.post(url, headers=self.headers)

        #Check existance of multi-page results
        [status_code, flag] = self.ResponseParser(response)
        if status_code==-2:
            step=1
            while 1:
                [drawing_no_returned, drawing_name, drawings] = flag
                params = {'step': step}
                response = self.session.post(url, headers=self.headers,params=params)
                [status_code_internal, flag] = self.ResponseParser(response)
                if status_code_internal==0 or status_code_internal==-2:
                    [drawing_no_returned_add, drawing_name_add, drawings_add] = flag
                    for n in drawings_add.keys():
                        for m in drawings[n].keys():
                            drawings[n][m] = drawings[n][m] + drawings_add[n][m]
                    if status_code_internal==-2:
                        step+=1
                    if status_code_internal==0:
                        break
                else:
                    return [status_code_internal, flag]
        elif status_code==0:
            [drawing_no_returned, drawing_name, drawings] = flag
        else:
            return [status_code, flag]

        if not drawing_no==(drawing_no_returned+'*'):
            return [-2, None]

        #Overwrite the drawing name(description) if better results exists
        if len(drawings['description']['lpi'])>0:
            drawing_name=drawings['description']['lpi'][0]
        elif len(drawings['description']['drawing']):
            drawing_name=drawings['description']['drawing'][0]
        if len(drawing_name) > 0:
            if drawing_name[0] == '(' and drawing_name[-1] == ')':
                drawing_name = drawing_name[1:-1]

        return [0,[drawing_name, drawings]]

    def ResponseParser(self,response):
        if 0: #This part for debug only
            debug_op=open('response.html','w')
            debug_op.write(response.text)
            debug_op.close()
        soup = BeautifulSoup(response.text, 'html.parser')

        #Extract drawing number
        uncut = soup.find_all(class_='smallBFN', style=False)[0].get_text()
        start = 'number='
        end = '*'
        drawing_no = str(uncut).split(start)[1].split(end)[0]

        #Extract drawing name
        raw_content=soup.find_all(class_='c2')
        if len(raw_content)==0:
            return [-1,'No result.']
        start='"vb">'
        end='</span'
        drawing_name=str(raw_content[1]).split(start)[1].split(end)[0]

        #Extract drawing names and links
        raw_content = soup.find_all(class_='c1')
        file_names = []
        links = []
        start = 'href="'
        end = '"'
        for n in raw_content:
            if '.' in str(n.get_text()):
                file_names.append(str(n.get_text()))
                links.append('http://gestdoc.es.eu.airbus.corp:8095'+str(n).split(start)[1].split(end)[0])

        #Extract drawing descriptions
        raw_content=soup.find_all(class_='c2')
        descriptions=[]
        for n in raw_content[1:]:
            descriptions.append(str(n.get_text()))

        #Sort the results
        drawings={'file_name':{'drawing':[],'ecn':[],'lpi':[],'other':[]},
                  'link':{'drawing':[],'ecn':[],'lpi':[],'other':[]},
                  'description':{'drawing':[],'ecn':[],'lpi':[],'other':[]}}
        for n in range(0,len(file_names)):
            type_str=file_names[n].split('-----')[1].split('-')[0]
            if type_str=='DRW':
                key='drawing'
            elif type_str=='ECN':
                key='ecn'
            elif type_str=='LPI':
                key='lpi'
            else:
                key='other'
            drawings['file_name'][key].append(file_names[n])
            drawings['link'][key].append(links[n])
            drawings['description'][key].append(descriptions[n])

        #Check existance of next page
        raw_content=soup.find_all(align='center', width='37%')
        if len(raw_content)>0:
            result_board=raw_content[0].get_text().split()
            if not result_board[-3]==result_board[-1]:
                return [-2, [drawing_no, drawing_name, drawings]]

        '''
        flag=0: normal
        flag=-1: no result
        flag=-2: next page needed
        
        drawing_no: drawing no in string
        drawing_name: drawing name in string
        '''
        return [0,[drawing_no,drawing_name,drawings]]

class Downloader():
    def __init__(self,file_names,urls,target_folders):
        self.target_folder=target_folders
        self.targets=queue.Queue()
        for n in range(0,len(file_names)):
            self.targets.put([file_names[n],urls[n],target_folders[n]])
        self.workers=[]
        for n in range(0,5):
            self.workers.append(threading.Thread(target=self.dl))
            self.workers[-1].start()

    def dl(self):
        while True:
            [name,url,target_folder]=self.targets.get()
            response=requests.get(url,auth=HTTPBasicAuth('ua5995', 'ua5995'))
            tf = open('%s//%s' % (target_folder, name), 'wb')
            tf.write(response.content)
            tf.close()
            self.targets.task_done()

class BatchDia(QDialog):
    def __init__(self,parent):
        super(BatchDia, self).__init__(parent)
        self.its_parent=parent
        self.setWindowTitle('Search Multiple Drawings')
        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)

        self.IniGUIElements()
        self.DrawLayout()

    def IniGUIElements(self):
        self.plain_edit=QPlainTextEdit()

        self.search_button=QPushButton('Batch Search')
        self.search_button.clicked.connect(self.SearchButtonClicked)

        self.cancel_button=QPushButton('Cancel')
        self.cancel_button.clicked.connect(self.CancelButtonClicked)

    def DrawLayout(self):
        button_layout=QHBoxLayout()
        button_layout.addStretch()
        button_layout.addWidget(self.search_button)
        button_layout.addWidget(self.cancel_button)

        main_layout=QVBoxLayout()
        main_layout.addWidget(QLabel('Search Multiple Drawings.'))
        main_layout.addWidget(QLabel('One Drawing Number per Line.'))
        main_layout.addWidget(self.plain_edit)
        main_layout.addLayout(button_layout)

        self.setLayout(main_layout)

    def CancelButtonClicked(self):
        self.close()

    def SearchButtonClicked(self):
        search_text=self.plain_edit.toPlainText()
        self.its_parent.BatchDiaRecevier(search_text)
        self.close()

class WarningBox(QDialog):
    def __init__(self, parent, msg,flag=None):
        super(WarningBox, self).__init__(parent)
        self.my_parent = parent
        self.flag=flag
        self.setWindowTitle('Warning')
        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
        self.setMinimumSize(400, 120)
        self.DefineUIElements()
        self.msg = msg
        self.Start()

    def Start(self):
        msg = self.msg

        top_right_layout = QVBoxLayout()
        if type(msg) == type('str'):
            label = QLabel(msg)
            label.setAlignment(Qt.AlignLeft)
            top_right_layout.addWidget(label)
        elif type(msg) == type([]) or type(msg) == type((0,)):
            labels = []
            for n in msg:
                labels.append(QLabel('%s' % n))
                labels[-1].setAlignment(Qt.AlignLeft)
            for n in range(0, len(labels)):
                top_right_layout.addWidget(labels[n])
        top_right_layout.addStretch()

        label = QSvgWidget(self.my_parent.cache_dir+'//warning_yellow.svg')
        label.setFixedSize(100, 100)

        top_layout = QHBoxLayout()
        top_layout.addWidget(label)
        top_layout.addLayout(top_right_layout)

        button_layout = QHBoxLayout()
        button_layout.addStretch()
        button_layout.addWidget(self.ok_button)
        button_layout.addWidget(self.cancel_button)

        dia_layout = QVBoxLayout()
        dia_layout.addLayout(top_layout)
        dia_layout.addLayout(button_layout)

        self.setLayout(dia_layout)

    def DefineUIElements(self):
        self.ok_button = QPushButton('OK')
        self.ok_button.clicked.connect(self.OKButtonClicked)
        self.ok_button.setFixedWidth(100)

        self.cancel_button = QPushButton('Cancel')
        self.cancel_button.setFixedWidth(100)
        self.cancel_button.clicked.connect(self.close)

    def OKButtonClicked(self):
        self.my_parent.MsgBoxInterface(True,self.flag)
        self.close()

class InfoBox(QDialog):
    def __init__(self, parent, msg,flag=None):
        super(InfoBox, self).__init__(parent)
        self.my_parent = parent
        self.flag=flag
        self.setWindowTitle('Information')
        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
        self.setMinimumSize(400, 120)
        self.DefineUIElements()
        self.msg = msg
        self.Start()

    def Start(self):
        msg = self.msg

        top_right_layout = QVBoxLayout()
        if type(msg) == type('str'):
            label = QLabel(msg)
            label.setAlignment(Qt.AlignLeft)
            top_right_layout.addWidget(label)
        elif type(msg) == type([]) or type(msg) == type((0,)):
            labels = []
            for n in msg:
                labels.append(QLabel('%s' % n))
                labels[-1].setAlignment(Qt.AlignLeft)
                labels[-1].setOpenExternalLinks(True)
            for n in range(0, len(labels)):
                top_right_layout.addWidget(labels[n])
        top_right_layout.addStretch()

        label = QSvgWidget(self.my_parent.cache_dir+'//info_blue.svg')
        label.setFixedSize(100, 100)

        top_layout = QHBoxLayout()
        top_layout.addWidget(label)
        top_layout.addLayout(top_right_layout)

        button_layout = QHBoxLayout()
        button_layout.addStretch()
        button_layout.addWidget(self.ok_button)

        dia_layout = QVBoxLayout()
        dia_layout.addLayout(top_layout)
        dia_layout.addLayout(button_layout)

        self.setLayout(dia_layout)

    def DefineUIElements(self):
        self.ok_button = QPushButton('OK')
        self.ok_button.clicked.connect(self.OKButtonClicked)
        self.ok_button.setFixedWidth(100)

    def OKButtonClicked(self):
        self.close()

class OverwriteDia(QDialog):
    def __init__(self,parent,file_names,ori_file_path,target_folder):
        super(OverwriteDia, self).__init__(parent)
        self.my_parent = parent
        self.file_names=file_names
        self.ori_file_path=ori_file_path
        self.target_folder=target_folder
        self.setWindowTitle('Save Files')
        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
        self.setMinimumSize(400, 120)
        self.DefineUIElements()
        self.Start()

    def Start(self):
        msg = ['There are files with the same names in this location.']
        for n in self.file_names:
            msg.append(n)
        msg.append('What would you like to do?')

        top_right_layout = QVBoxLayout()
        if type(msg) == type('str'):
            label = QLabel(msg)
            label.setAlignment(Qt.AlignLeft)
            top_right_layout.addWidget(label)
        elif type(msg) == type([]) or type(msg) == type((0,)):
            labels = []
            for n in msg:
                labels.append(QLabel('%s' % n))
                labels[-1].setAlignment(Qt.AlignLeft)
                labels[-1].setOpenExternalLinks(True)
            for n in range(0, len(labels)):
                top_right_layout.addWidget(labels[n])
        top_right_layout.addStretch()

        label = QSvgWidget(self.my_parent.cache_dir+'//info_blue.svg')
        label.setFixedSize(100, 100)

        top_layout = QHBoxLayout()
        top_layout.addWidget(label)
        top_layout.addLayout(top_right_layout)

        button_layout = QHBoxLayout()
        button_layout.addStretch()
        button_layout.addWidget(self.overwrite_button)
        button_layout.addWidget(self.keep_button)
        button_layout.addWidget(self.dontcopy_button)

        dia_layout = QVBoxLayout()
        dia_layout.addLayout(top_layout)
        dia_layout.addLayout(button_layout)

        self.setLayout(dia_layout)

    def DefineUIElements(self):
        self.overwrite_button = QPushButton('Overwirte')
        self.overwrite_button.clicked.connect(self.OverwriteButtonClicked)

        self.keep_button = QPushButton('Keep Both')
        self.keep_button.clicked.connect(self.KeepBothButtonClicked)

        self.dontcopy_button=QPushButton('Don''t Copy')
        self.dontcopy_button.clicked.connect(self.DontCopyButtonClicked)

    def OverwriteButtonClicked(self):
        self.my_parent.CopyFileStage2(self.file_names,self.ori_file_path,self.target_folder,'overwrite')
        self.close()

    def KeepBothButtonClicked(self):
        self.my_parent.CopyFileStage2(self.file_names,self.ori_file_path,self.target_folder,'keepboth')
        self.close()

    def DontCopyButtonClicked(self):
        self.my_parent.CopyFileStage2(self.file_names,self.ori_file_path,self.target_folder,'dontcopy')
        self.close()

class SVGGenerator_essential():
    def __init__(self,cache_dir):
        text='<?xml version="1.0"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/' \
             'SVG/1.1/DTD/svg11.dtd"><svg t="1539268994291" class="icon" style="" viewBox="0 0 1025 1024" version' \
             '="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1054" xmlns:xlink="http://www.w3.org/1999/xlink" ' \
             'width="200.1953125" height="200"><defs><style type="text/css"></style></defs><path d="M901.304044 ' \
             '1.533699l-777.074388 0c-67.789516 0-122.695956 54.90644-122.695956 122.695956l0 777.074388c0 67.78951' \
             '6 54.90644 122.695956 122.695956 122.695956l777.074388 0c67.789516 0 122.695956-54.90644 122.695956-' \
             '122.695956l0-777.074388C1024 56.542386 969.09356 1.533699 901.304044 1.533699zM889.545681 678.815377' \
             ' 679.122117 889.545681c-14.212282 14.212282-38.54698 4.192112-38.54698-16.052721L640.575137 736.175736' \
             ' 486.796206 606.731503 313.692661 883.104144c-17.484174 17.484174-45.704244 17.484174-63.188417 ' \
             '0-13.803295-13.905542-13.087569-32.105442-8.690964-50.918822l81.797304-382.197903L155.517124 ' \
             '281.791712c-35.172841-35.377334-35.070594-92.737693 1.124713-127.603794 35.172841-34.150374 ' \
             '91.817474-32.616675 126.479081 2.044933l166.968747 167.275487 381.891163-82.001797c18.81338-4.498852 ' \
             '37.115527-5.010085 50.816575 8.690964 17.484174 17.484174 17.484174 45.908737 0 63.290664L606.935996 ' \
             '486.489466l129.444234 153.778932 137.214978 0C893.635547 640.268397 903.757963 664.603095 889.545681 ' \
             '678.815377z" p-id="1055" fill="#13227a"></path></svg>'
        try:
            with open('%s//icon.svg' % cache_dir, 'w') as f:
                f.write(text)
        except:
            pass

        text='<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" ' \
             '"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1539269252767" class="icon" ' \
             'style="" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id=' \
             '"1403" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><defs><style ' \
             'type="text/css"></style></defs><path d="M15.22317776 567.58006973c26.63420109 99.62813068 ' \
             '85.24208135 171.13711666 184.91760388 205.0064685 162.44861689 55.20620098 337.67722706-' \
             '56.58582941 355.0384293-227.29115396 2.44857721-24.09610602 10.08919129-32.01580524 ' \
             '33.27958702-29.68834041 17.29801317 1.73769995 34.90670605 0.34227422 52.03094926 ' \
             '0.34227422 14.15962175 74.6368459-39.59849594 204.00070881-145.72457128 268.29034132-' \
             '118.79548777 71.96184109-288.91631325 69.43427755-414.97328054-68.20735606 52.39955222 ' \
             '99.7703061 187.79797315 174.32289989 334.27554783 159.78414364 157.29344036-15.62350228 ' \
             '315.00287553-139.9533011 328.1093458-357.87667256h82.58287386c9.13082338 105.08872112-' \
             '55.34311062 263.98821753-199.18780653 348.99860552-126.08329604 74.51046773-350.28871611 ' \
             '99.34904557-525.87013205-93.25129844 72.48841686 122.43939189 237.09599427 217.22302572 ' \
             '433.01903118 190.85211251 192.77411395-25.96018416 379.16086414-186.12346233 392.54641954-' \
             '446.82058143h82.98833719c10.62629851 194.28012059-138.47362329 442.08666546-409.00717724 ' \
             '488.05146217-318.79422092 54.16884673-559.7342181-181.26843396-584.02515722-438.19000502zM' \
             '99.0856307 510.95738005h-84.58912744c2.02731662-152.53846138 58.0813045-280.82284404 ' \
             '174.75995779-377.32311481 159.98424241-132.31795284 340.33643459-159.49979271 530.75148915' \
             '-74.68950349 170.46836546 75.92695645 261.99249546 214.25313855 289.50607808 396.68003914-' \
             '17.59816137-64.46340253-51.14630195-118.95346045-104.79910449-159.65249967-54.37421125-' \
             '41.25194375-116.44169417-61.52510987-184.58059537-56.02239338-120.09612981 9.69952517-' \
             '245.14733741 100.81819186-255.16280807 269.99644675h-82.27219417c-11.20026606-90.90803637 ' \
             '52.7418265-217.49157937 162.42228816-276.37327897 98.04313771-52.64177709 262.75076451-' \
             '68.6128194 399.19707113 76.40614036-46.58615606-92.21394425-185.67587297-177.6245298-' \
             '337.35075009-159.42080636-160.50555238 19.26214069-312.82285198 145.19799554-324.37065808 ' \
             '359.28789561h-82.10368992c-11.60046365-103.46160206 53.5685504-270.80210763 206.79156025-' \
             '354.8699251 146.58288975-80.42391331 359.49852587-76.09019494 515.71775171 96.41601862-' \
             '58.44990752-105.19403627-217.26515179-212.18896161-417.09538071-191.39975125-190.44138339 ' \
             '19.81504522-394.26305648 177.00317045-406.82188793 450.96473255z" p-id="1404" ' \
             'fill="#dbdbdb"></path></svg>'
        try:
            with open('%s//logo.svg' % cache_dir, 'w') as f:
                f.write(text)
        except:
            pass

        text='<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http:' \
             '//www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1501675968466" class="icon" style="" ' \
             'viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2560" xmlns:' \
             'xlink="http://www.w3.org/1999/xlink" width="200" height="200"><defs><style type="text/css">' \
             '</style></defs><path d="M983.572242 312.769446c-25.77913-60.950164-62.677505-115.681696-' \
             '109.668749-162.67294-46.992267-46.991244-101.723799-83.889619-162.67294-109.669772-63.12162-' \
             '26.698059-130.153292-40.235376-199.230554-40.235376-69.078285 0-136.107911 13.537318-199.230554 ' \
             '40.235376C251.819283 66.205864 197.088774 103.104239 150.096507 150.096507c-46.991244 46.992267' \
             '-83.890642 101.722776-109.669772 162.67294-26.698059 63.12162-40.235376 130.152269-40.235376 ' \
             '199.230554s13.537318 136.108934 40.235376 199.22953c25.77913 60.951187 62.678528 115.681696 ' \
             '109.669772 162.67294 46.992267 46.992267 101.722776 83.890642 162.67294 109.669772 63.12162 ' \
             '26.699082 130.152269 40.235376 199.230554 40.235376 69.077262 0 136.107911-13.536294 199.230554' \
             '-40.235376 60.950164-25.77913 115.680673-62.677505 162.67294-109.669772 46.991244-46.991244 ' \
             '83.889619-101.722776 109.668749-162.67294 26.699082-63.120596 40.235376-130.152269 40.235376-' \
             '199.22953S1010.271324 375.891066 983.572242 312.769446zM512 858.93457c-40.408315 0-73.28305-' \
             '32.874735-73.28305-73.28305 0-40.408315 32.874735-73.28305 73.28305-73.28305 40.408315 0 ' \
             '73.28305 32.874735 73.28305 73.28305C585.28305 826.059835 552.408315 858.93457 512 858.93457zM' \
             '585.28305 604.275613c0 40.408315-32.874735 73.28305-73.28305 73.28305-40.408315 0-73.28305-' \
             '32.874735-73.28305-73.28305L438.71695 238.34848c0-40.408315 32.874735-73.28305 73.28305-' \
             '73.28305 40.408315 0 73.28305 32.874735 73.28305 73.28305L585.28305 604.275613z" p-id="2561" ' \
             'fill="#f4ea2a"></path></svg>'
        try:
            with open('%s//warning_yellow.svg' % cache_dir, 'w') as f:
                f.write(text)
        except:
            pass

        text='<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://' \
             'www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1501726896124" class="icon" style="" ' \
             'viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2558" xmlns:' \
             'xlink="http://www.w3.org/1999/xlink" width="200" height="200"><defs><style type="text/css">' \
             '</style></defs><path d="M511.999634 1023.990492a501.75104 501.75104 0 0 1-199.383868-40.008429 ' \
             '513.819396 513.819396 0 0 1-163.105659-109.492902 513.819396 513.819396 0 0 1-109.492901-' \
             '163.105659A501.75104 501.75104 0 0 1 0.008777 511.999634c0-70.581597 13.311762-136.994125 ' \
             '40.008429-199.383868a513.819396 513.819396 0 0 1 109.492901-163.105659A513.819396 513.819396 ' \
             '0 0 1 312.615766 40.017205 501.75104 501.75104 0 0 1 511.999634 0.008777a501.75104 501.75104 ' \
             '0 0 1 199.383869 40.008428 513.819396 513.819396 0 0 1 163.105658 109.492902 513.819396 ' \
             '513.819396 0 0 1 109.492902 163.105659A501.75104 501.75104 0 0 1 1023.990492 511.999634a501.75104 ' \
             '501.75104 0 0 1-40.008429 199.383868 513.819396 513.819396 0 0 1-109.492902 163.105659 513.819396 ' \
             '513.819396 0 0 1-163.105658 109.492902A501.75104 501.75104 0 0 1 511.999634 1023.990492zM511.999634 ' \
             '219.43343a70.508455 70.508455 0 0 0-51.784218 21.357333A70.508455 70.508455 0 0 0 438.858083 ' \
             '292.574981c0 20.333351 7.09473 37.594757 21.357333 51.784218 14.189461 14.262602 31.450867 ' \
             '21.357333 51.784218 21.357333a70.508455 70.508455 0 0 0 51.784219-21.357333A70.508455 70.508455 ' \
             '0 0 0 585.141185 292.574981a70.508455 70.508455 0 0 0-21.357332-51.784218A70.508455 70.508455 0 ' \
             '0 0 511.999634 219.43343z m59.098374 275.451081a52.661917 52.661917 0 0 0-17.261406-39.715862A58.586382' \
             ' 58.586382 0 0 0 511.999634 438.858083a58.586382 58.586382 0 0 0-41.836967 16.310566 52.661917 ' \
             '52.661917 0 0 0-17.261406 39.715862v261.407904a52.661917 52.661917 0 0 0 17.261406 39.64272 ' \
             '58.586382 58.586382 0 0 0 41.836967 16.383708 58.586382 58.586382 0 0 0 41.836968-16.383708 ' \
             '52.661917 52.661917 0 0 0 17.261406-39.64272V494.884511z" p-id="2559" fill="#1296db"></path></svg>'
        try:
            with open('%s//info_blue.svg' % cache_dir, 'w') as f:
                f.write(text)
        except:
            pass

class WaitingDialog(QDialog):
    def __init__(self,parent):
        super(WaitingDialog, self).__init__(parent)
        self.setWindowFlags(self.windowFlags() & ~Qt.WindowCloseButtonHint & ~Qt.WindowContextHelpButtonHint)
        self.setFixedSize(250,100)
        self.setWindowTitle('Waiting')
        self.DrawLayout()

    def DrawLayout(self):
        main_layout=QHBoxLayout()
        label=QLabel('The files are downloading.')
        label.setAlignment(Qt.AlignCenter)
        font=QFont('Times', 10, QFont.Bold)
        label.setFont(font)
        main_layout.addWidget(label)
        self.setLayout(main_layout)

class LogoSvgWidget(QSvgWidget):
    def __init__(self,path):
        super(LogoSvgWidget,self).__init__(path)
        self.double_clicked=0

    def mouseDoubleClickEvent(self, e):
        self.double_clicked+=1
        if self.double_clicked==5:
            try:
                threading.Thread(target=os.startfile, args=('M://CREATE//createxzhang_yf//Games//combo.py',)).start()
            except:
                pass

class BoardLineEdit(QLineEdit):
    def __init__(self):
        super(BoardLineEdit, self).__init__()

    def mousePressEvent(self, e):
        self.selectAll()

SetProxy()
app=QApplication(sys.argv)
window=MainWindow()
window.show()
app.exec_()
